// Object of all users
const users = {};

// Variables to hold the number of days between waterings depending on plant type
const succWater = 15;
const lowSunWater = 10;
const lowLightWater = 8;
const indirectWater = 4;

// Create a new date object and use it to get today's full date - no time included
const d = new Date();
const todaysDate = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;

// Response function that sends a json response + status and header
const respond = (request, response, status, user) => {
  const headers = {
    'Content-Type': 'application/json',
  };

  response.writeHead(status, headers);
  response.write(JSON.stringify(user));
  response.end();
};

// Response function that sends a response with just the status and header
const respondEmpty = (request, response, status) => {
  const headers = {
    'Content-Type': 'application/json',
  };

  response.writeHead(status, headers);
  response.end();
};

// CALCULATE DAYS
/* If the date watered is BEFORE the current date, calculate the number of days until watering is
   needed again and create a string with that information

   If the date watered is AFTER the current date, inform the user plants can't be watered in the
   future

   return the string */
const calculateDays = (waterDate, currentDate, plantName, dateObj) => {
  const currentDay = currentDate[2];
  const waterDay = waterDate[2];

  let daysTilWater = 0;

  let waterWarning = `${plantName} needs water in`;

  if (dateObj.getTime() < d.getTime()) {
    if (currentDay - waterDay < 0) {
      daysTilWater = currentDay - waterDay;
      waterWarning = `${waterWarning} <strong>${Math.abs(daysTilWater)}</strong> day(s)`;
    } else {
      daysTilWater = currentDay - waterDay;
      waterWarning = `${plantName} needed water <strong>${daysTilWater}</strong> day(s) ago`;
    }
  } else {
    waterWarning = 'Date entered is in the future';
  }

  return waterWarning;
};

// CALCULATE DATE
/* Create arrays from the current date and the date watered to get the day and month seperatley
   Based on the kind of plant, add the number of days until it will need water again to the date
   it was watered

   If this date is larger than the days in the month, increment the month by one and subtract
   the 29/30/31 days to get the days until watering

   This information is then passed into calculateDays() and returned to get the
   personalized string back per plant */
const calculateDate = (waterDate, plantKind, plantName) => {
  const waterDay = waterDate.split('-');
  const currentDate = todaysDate.split('-');

  // Create a new object date for the date the plant was watered
  // Use this object to find how many days are in that month
  const wD = new Date(waterDate);
  const daysInMonth = new Date(wD.getFullYear(), wD.getMonth() + 1, 0);

  // Add plant type specific days to date watered
  if (plantKind === 'Low Light') {
    waterDay[2] = parseInt(waterDay[2], 10) + lowLightWater;
  } else if (plantKind === 'Indirect Light') {
    waterDay[2] = parseInt(waterDay[2], 10) + indirectWater;
  } else if (plantKind === 'Low Sunlight') {
    waterDay[2] = parseInt(waterDay[2], 10) + lowSunWater;
  } else {
    waterDay[2] = parseInt(waterDay[2], 10) + succWater;
  }

  // Bump up a month is days exceed daysInMonth
  if (waterDay[2] > daysInMonth.getDate()) {
    waterDay[1] += 1;
    waterDay[2] -= daysInMonth.getDate();

    if (waterDay[1] > 12) {
      waterDay[1] = 1;
    }
  }

  return calculateDays(waterDay, currentDate, plantName, wD);
};

// HTML TEMPLATE
/* This function takes in the plant type and the string generated by calculateDays()
   via calculateDate()

   Both the string text and the corressponding image to the plant type are inserted
   into an HTML string that creates the rotating images/captions of each plant

   This is returned as it is eventually passed back to the client side via getUser() */
const htmlTemplate = (plantKind, textInfo) => {
  let plantURL = '/none';

  // Grab image URLS
  if (plantKind === 'Low Light') {
    plantURL = '/plant1';
  } else if (plantKind === 'Indirect Light') {
    plantURL = '/plant2';
  } else if (plantKind === 'Low Sunlight') {
    plantURL = '/plant3';
  } else {
    plantURL = '/plant4';
  }

  // create new bootstrap carousel item
  const htmlTemp = `<div class="carousel-item">
  <img src=${plantURL} alt="plant img">
  <div class="carousel-caption">
      <p>${textInfo}</p>
  </div>
  </div>`;

  return htmlTemp;
};

// GET USER
/* Use the search query parameter to pass back a specific user from the users object
   If search parameter doesn't match a user, pass back a 404 error */
const getUser = (request, response, params) => {
  if (users[String(params.findUser)]) {
    const key = String(params.findUser);
    const user = users[key];

    const responseJSON = {
      user,
    };

    return respond(request, response, 200, responseJSON);
  }

  const responseJSON = {
    message: '404 Error - Not Found',
    id: 'notFound',
  };

  return respond(request, response, 404, responseJSON);
};

// GET USER - HEAD
// Returns just the status code and headers on a HEAD request
const headUsers = (request, response, params) => {
  if (users[String(params.findUser)]) {
    return respondEmpty(request, response, 200);
  }

  return respondEmpty(request, response, 404);
};

// NOT FOUND
// Passes back a 404 not found status code with a message and ID
const notFound = (request, response) => {
  const responseJSON = {
    message: '404 Error - Not Found',
    id: 'notFound',
  };

  return respond(request, response, 404, responseJSON);
};

// HEAD NOT FOUND
// Passes back a 404 not found status code
const headNotFound = (request, response) => respondEmpty(request, response, 404);

// USER CREATION
// Handles the repeated intialization of arrays and pushing in info
const userCreation = (name, pName, pType, water) => {
  users[name].userName = name;
  users[name].plantName = [];
  users[name].plantType = [];
  users[name].template = [];

  users[name].plantName.push(pName);
  users[name].plantType.push(pType);

  // generate HTML template for that specific plant
  const waterTxt = calculateDate(water, pType, pName);
  const getTemplate = htmlTemplate(pType, waterTxt);
  users[name].template.push(getTemplate);
};

// ADD USER
/* Check if any parameters are missing from the form, if they are send back a bad request
   If a user already exists under that username, their info is updated and a 204 is sent,
   if not, a new user is created an a 201 is sent back

   Each user has 43 arrays to hold each plant and its corresponding information that is needed
   for the client side page
   (plant name, type of plant, and its generted html template) */
const addUser = (request, response, body) => {
  if (!body.userName || !body.plantName || !body.plantType || !body.watered) {
    return respondEmpty(request, response, 400);
  }

  let responseCode = 201;

  if (users[body.userName]) {
    responseCode = 204;
  } else {
    users[body.userName] = {};
  }

  // initialize arrays for the new user under their name
  userCreation(body.userName, body.plantName, body.plantType, body.watered);


  if (responseCode === 201) {
    return respondEmpty(request, response, responseCode);
  }

  return respondEmpty(request, response, responseCode);
};

// ADD PLANT
/* Check if any parameters are missing from the form, if they are send back a bad request
   Update the user who was searched in the search bar with the new plant information,
   send back a 204 update

   If the user entered in the search bar is different than the one currently being viewed,
   create a new user for that person with the new information
   send back a 201 update

   New information is pushed into the arrays of an already existing user
   OR a new user is created in the same way as addUser() with the info */
const addPlant = (request, response, body) => {
  if (!body.newPlantName || !body.newPlantType || !body.newWatered) {
    return respondEmpty(request, response, 400);
  }

  let responseCode = 204;

  if (users[body.userName]) {
    // update existing user
    users[body.userName].plantName.push(body.newPlantName);
    users[body.userName].plantType.push(body.newPlantType);

    // generate HTML template for that specific plant
    const waterTxt = calculateDate(body.newWatered, body.newPlantType, body.newPlantName);
    const getTemplate = htmlTemplate(body.newPlantType, waterTxt);
    users[body.userName].template.push(getTemplate);
  } else {
    // create new user
    users[body.userName] = {};

    // initialize information for new user
    userCreation(body.userName, body.newPlantName, body.newPlantType, body.newWatered);

    responseCode = 201;
  }

  return respondEmpty(request, response, responseCode);
};

// Export functions for use
module.exports = {
  getUser,
  addUser,
  notFound,
  addPlant,
  headUsers,
  headNotFound,
};
